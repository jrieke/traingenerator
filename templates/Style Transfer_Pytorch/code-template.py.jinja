import torch
from torch import nn 
from torch import optim
from torchvision import transforms
from PIL import Image
import torchvision.models as models
from torchvision.utils import save_image
import numpy as np

device = {{Device}}
model = models.vgg19(pretrained={{pretrained}}).features
print(model)

class VGG(nn.Module):
  def __init__(self):
    super(VGG,self).__init__()
    self.choosen_features = ['0','5','10','19','28']
    self.model = models.vgg19(pretrained=True).features[:29]

  def forward(self,x):
    features = []

    for layer_num , layer in enumerate(self.model):
      x = layer(x)

      if str(layer_num) in  self.choosen_features:
        features.append(x)

    return features    

model = VGG().to(device).eval()
loader = transforms.Compose([
    transforms.Resize((540,540)) ,
    transforms.ToTensor(),                        
])
def load_image(image_name):
  img = Image.open(image_name)
  img = loader(img).unsqueeze(0)
  return img.to(device)

image_size = 540
original_img = load_image('./content.jpg')
style_img = load_image('./style.jpg')

generated = original_img.clone().requires_grad_(True)

total_steps = {{ epochs }}
learning_rate = {{ lr }}
alpha = 1 
beta = 0.01
optimizer = optim.{{optimizer}}([generated],lr=learning_rate)

for step in range(total_steps):
  generated_features = model(generated)
  original_img_features = model(original_img)
  style_img_features = model(style_img)

  style_loss = original_loss = 0

  for gen_fea,ori_fea,style_fea in zip(generated_features,original_img_features,style_img_features):
    batch_size , channel,height,width = gen_fea.shape
    original_loss += torch.mean((gen_fea - ori_fea) ** 2)
    
    G = gen_fea.view(channel,height*width).mm(
        gen_fea.view(channel,height*width).t()
    )

    A = style_fea.view(channel,height*width).mm(
        style_fea.view(channel,height*width).t()
    )

    style_loss += torch.mean((G - A)**2)

  total_loss = alpha*original_loss + beta * style_loss
  optimizer.zero_grad()
  total_loss.backward()
  optimizer.step()

  if step % {{ visualize_per_epoch }} == 0:
    print(f'Total_Loss: {total_loss}')
    save_image(generated,'Generated.png')
